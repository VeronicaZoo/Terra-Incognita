static final int NUM_LINES = 10;;
import processing.sound.*;
Amplitude amp;
AudioIn in;
float ampt;
float t;

void setup() {
  background(20);
  size(500, 500);
    amp = new Amplitude(this);
  in = new AudioIn(this, 0);
  in.start();
  amp.input(in);
}

//getting rid of background function clears drawing every frame
void draw(){
  background(244);
    ampt = amp.analyze();
  println(ampt);
  stroke(400*ampt, 2000*ampt, 700*ampt, 90);
  strokeWeight(5);
  translate(width/2, height/2);
  for (int i = 0; i < NUM_LINES; i++) {
  line(x1(t + i), y1(t + i), x2(t), y2(t));
  point(x1(t), y1(t));
  point(x2(t), y2(t));
  t += ampt;
}
}

//coefficiency inside sin wave will change frequency
//coeffeciency outside the sin wave will change amplitude

float x1(float t) {
  return sin(t/10) * 100 + sin(t/15) * 100;
}

float y1(float t) {
  return cos(t/10) * 100;
}


float x2(float t) {
  return sin(t/10) * 100 + sin(t/15) * 100;
}

float y2(float t) {
  return cos(t/10) * 100 + cos(t/ 14) * 20;
}
